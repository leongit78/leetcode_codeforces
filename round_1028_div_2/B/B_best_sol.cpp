#include<bits/stdc++.h>

using namespace std;

const int N = 1e5 + 5, Mod = 998244353;

// s - массив для всевозможных остатков от деления всех степеней 2-ки на Mod
// p - массив для первой перестановки
// q - массив для второй перестановки
int n = 0, s[N] = {}, p[N] = {}, q[N] = {};

// inline - тело функции вставится на место ее вызова.
inline void solve(){
	scanf("%d", &n);

	for(int i = 0 ; i < n ; i ++) scanf("%d", &p[i]);
	for(int i = 0 ; i < n ; i ++) scanf("%d", &q[i]);


    // В задании нужно найти макс сумму 2 в степени элемента массива -> оптимально создать массив со всеми степенями 2-ки и работать с инлдексами этого массива 
	for(int i = 0, j = 0, k = 0 ; k < n ; k ++){
		if(p[k] > p[i]) i = k; if(q[k] > q[j]) j = k; // ищем индексы максимальных элементов в обоих перестановках 
		if(p[i] != q[j]){
			if(p[i] > q[j]) printf("%d ", (s[p[i]] + s[q[k - i]]) % Mod); // Имея различные максимальные значения макс сумма текущей итерации будет считаться относительно большего максимального значения (Например макс значения: 9 и 8. В текущей итерации 9 соотв. 1, а 8 соотв. 4, но так как 2^9 + 2^1 > 2^8 + 2^4 -> считаем сумму относительно 9-ки)
			else printf("%d ", (s[q[j]] + s[p[k - j]]) % Mod);
		}
		else printf("%d ", (s[p[i]] + s[max(q[k - i], p[k - j])]) % Mod); // Если найденные максимальные элементы равны, то опираясь на них считаем маск сумму на текущем шаге. s[p[i]] - p[i] один из макс. элементов,  s[max(q[k - i], p[k - j]) - ищем максимум среди элементов соотносящихся с максимальными на текущей итерации
	}
	printf("\n");
}

int T = 0;

int main(){
    // Так считать остатки очень быстро потому что не нужно считать огромную степень, а просто домножить прошлый отстаток на 2 и взять от этого остаток от деления на Mod -> ни когда не может появиться число > Mod-1(влезает в int)
	s[0] = 1; for(int i = 1 ; i < N ; i ++) s[i] = s[i - 1] * 2 % Mod; 
	scanf("%d", &T);
	while(T --) solve();
	return 0;
}
// s = {1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 75497471, 150994942, 301989884, ...}